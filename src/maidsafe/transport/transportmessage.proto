package transport;

message Address {
  required bytes ip = 1;
  required int32 port = 2;
}

message Ping {
  optional Address from_address = 1;
}

message ProxyPing {
  enum SubType {
    kACK = 0;
    kNACK = 1;
  }
  optional SubType result = 1;
  optional Address address = 2;
}

message ManagedEndpointMessage {
  optional Address address = 1;
  optional bool result = 2;
  optional int32 message_id = 3;
  optional bytes identifier = 4;
  optional int32 frequency = 5;
  optional int32 retry_count = 6;
  optional int32 retry_frequency = 7;
}

message HolePunchingMessage {
  required bytes ip = 1;
  required int32 port = 2;
  required msg_type type = 3;
  enum msg_type {
    FORWARD_REQ = 0;
    FORWARD_MSG = 1;
  }
}

message NatDetection {
  repeated bytes candidate_ips = 1;
  required int32 candidate_port = 2;
}

message RendezvousNode {
  required bytes rendezvous_node_ip = 1;
  required int32 rendezvous_node_port = 2;
}

message ConnectionNode {
  required bytes connection_node_ip = 1;
  required int32 connection_node_port = 2;
}

message ConnectionResult {
  required bool result = 1;
}

message NatInformation {
  optional bytes ip = 1;
  optional int32 port = 2;
  required int32 nat_type = 3;
}

message TransportMessage {
  enum Type {
    kKeepAlive = 0;  // leave socket available to send the response on
    kClose = 1;  // socket is closed on receiving this type
                 // unless it's a managed connection
  }
  message Data {
    extensions 100 to 18999;  // Allows extensions of the message types
    optional bytes raw_message = 1;
    optional HolePunchingMessage hole_punching_message = 2;
    optional Ping ping = 3;
    optional ProxyPing proxy_ping = 4;
    optional ManagedEndpointMessage managed_endpoint_message = 5;
    optional NatDetection nat_detection = 6;
    optional RendezvousNode rendezvous_node = 7;
    optional NatInformation nat_information = 8;
    optional ConnectionNode connection_node = 9;
    optional ConnectionResult connection_result = 10;
  }
  required Type type = 1;
  required Data data = 2;
}

// To add a message elsewhere (outside this library) type do this
//  package transport; // to get this namespace
//  extend TransportMessage.Data {
//    optional NewMessageType my_message = 100;
//    optional AnotherNewMessageType my_other_message = 101;
//  }
//
//

